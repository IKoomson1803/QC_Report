@model Deluxe.QCReport.Web.Models.HomeVM


<div class="bs-callout bs-callout-warning">


    <div class="row">
        <div class="col-xs-3">
            <b style="font-size:14px;">@string.Format("{0} - {1}: Measurements", Model.OverallSpecs_VM.Qcnum, Model.OverallSpecs_VM.subQcnum)</b>
        </div>


        @if (Model.SecurityLevel >= 1)
        {

            <div class="col-xs-6 text-center">

                <button class="btn btn-xs btn-primary CRUDButton" id="btnSave">Save</button>
            </div>

        }


    </div>

    @*<div class="row" style="height:500px; overflow-y:auto;overflow-x:hidden;">*@

        @using (Html.BeginForm("SaveOverallSpecsDetails", "Job", FormMethod.Post,
            new { @class = "form-horizontal form-group-sm", 
                @style = "margin-top: 20px;", 
                @id = "form_jobdetails" }))
        {
            @Html.HiddenFor(m => m.OverallSpecs_VM.Qcnum);
            @Html.HiddenFor(m => m.OverallSpecs_VM.subQcnum);

            <div class="row" style="margin-top: -20px;">
                <div class="col-sm-3">
                    <div class="bs-callout bs-callout-default">
                        <b style="font-size:14px;">Bars</b>

                        <div class="row" style="margin-top: 20px;">
                            <div class="col-sm-6 text-right">

                                <label class="control-label">Video Gain:</label>
                            </div>

                            <div class="col-sm-6 form-group">

                                @Html.TextBoxFor(m => m.OverallSpecs_VM.VideoGain, 
                               new { @class = "form-control", maxlength = "40" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6 text-right">

                                <label class="control-label">Chroma Gain:</label>
                            </div>

                            <div class="col-sm-6 form-group">


                                @Html.TextBoxFor(m => m.OverallSpecs_VM.ChromaGain, 
                               new { @class = "form-control", maxlength = "40" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-6 text-right">

                                <label class="control-label">Set up:</label>
                            </div>

                            <div class="col-sm-6 form-group">

                                @Html.TextBoxFor(m => m.OverallSpecs_VM.SetUp, 
                               new { @class = "form-control", maxlength = "40" })
                            </div>

                        </div>
                    </div>

                </div>

                <div class="col-sm-9">

                    <div class="bs-callout bs-callout-default">
                        <b style="font-size:14px;">Video Measurements</b>

                        <div class="row" style="margin-top: 20px;">
                            <div class="col-sm-2 text-right">

                                <label class="control-label">Luminance Peak:</label>
                            </div>

                            <div class="col-sm-2 form-group">

                                @Html.TextBoxFor(m => m.OverallSpecs_VM.LuminancePeak, 
                               new { @class = "form-control", maxlength = "40" })
                            </div>

                            <div class="col-sm-4 text-right">

                                <label class="control-label">Chroma Peak:</label>
                            </div>

                            <div class="col-sm-2 form-group">

                                @Html.TextBoxFor(m => m.OverallSpecs_VM.ChromaPeak,
                               new { @class = "form-control", maxlength = "40" })
                            </div>
                            <div class="col-sm-2">

                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-2 text-right">

                                <label class="control-label">Luminance Avg:</label>
                            </div>

                            <div class="col-sm-2 form-group">

                                @Html.TextBoxFor(m => m.OverallSpecs_VM.LuminanceAvg,
                               new { @class = "form-control", maxlength = "40" })
                            </div>

                            <div class="col-sm-4 text-right">

                                <label class="control-label">Chroma Avg:</label>
                            </div>

                            <div class="col-sm-2 form-group">

                                @Html.TextBoxFor(m => m.OverallSpecs_VM.ChromaAvg,
                               new { @class = "form-control", maxlength = "40" })
                            </div>
                            <div class="col-sm-2">

                            </div>
                        </div>

                        <div class="row">
                            <div class="col-sm-2 text-right">

                                <label class="control-label">Black Level:</label>
                            </div>

                            <div class="col-sm-2 form-group">

                                @Html.TextBoxFor(m => m.OverallSpecs_VM.BlackLevel,
                               new { @class = "form-control", maxlength = "40" })
                            </div>

                            <div class="col-sm-4 text-right">

                                <label class="control-label">Active Picture:</label>
                            </div>

                            <div class="col-sm-2 form-group">

                                @Html.TextBoxFor(m => m.OverallSpecs_VM.ActivePicture,
                               new { @class = "form-control", maxlength = "40" })
                            </div>


                        </div>

                        <div class="row">
                            <div class="col-sm-2 text-right">
                                <label class="control-label">Max CLL:</label>
                            </div>
                            <div class="col-sm-2 form-group">
                                @Html.TextBoxFor(m => m.OverallSpecs_VM.MaxCLL,
                               new { @class = "form-control", maxlength = "50" })
                            </div>

                            <div class="col-sm-4 text-right">

                                <label class="control-label">H-Blanking:</label>
                            </div>

                            <div class="col-sm-2 form-group">

                                @Html.TextBoxFor(m => m.OverallSpecs_VM.HBlanking,
                               new { @class = "form-control", maxlength = "40" })
                            </div>

                        </div>


                        <div class="row">

                            <div class="col-sm-2 text-right">
                                <label class="control-label">Max FALL:</label>
                            </div>
                            <div class="col-sm-2 form-group">
                                @Html.TextBoxFor(m => m.OverallSpecs_VM.MaxFALL,
                               new { @class = "form-control", maxlength = "50" })
                            </div>


                            <div class="col-sm-4 text-right">

                                <label class="control-label">V-Blanking:</label>
                            </div>

                            <div class="col-sm-2 form-group">

                                @Html.TextBoxFor(m => m.OverallSpecs_VM.VBlanking,
                               new { @class = "form-control", maxlength = "40" })
                            </div>

                        </div>
                    </div>

                </div>
            </div>

            if (Model.OverallSpecs_VM.AssetType.ToLower() == "file")
            {

<div class="bs-callout bs-callout-default">
    <b style="font-size:14px;">File Measurements</b>

    <div class="row" style="margin-top: 20px;">
        <div class="col-sm-2 text-right">

            <label class="control-label">Video Codec:</label>
        </div>

        <div class="col-sm-2 form-group">

            @Html.DropDownListFor(m => m.OverallSpecs_VM.VideoCodec,
           new SelectList(Model.VideoCodecList, "value", "value"), "",
           new { @class = "form-control", @style = "width:150px" })
        </div>

        <div class="col-sm-2 text-right">

            <label class="control-label">Video Bit Rate:</label>
        </div>

        <div class="col-sm-2 form-group">

            @Html.TextBoxFor(m => m.OverallSpecs_VM.VideoBitRate,
           new { @class = "form-control", @style = "width:120px" })
        </div>

        <div class="col-sm-2 text-right">

            <label class="control-label">Video Bit Depth:</label>
        </div>

        <div class="col-sm-2 form-group">

            @Html.DropDownListFor(m => m.OverallSpecs_VM.VideoBitDepth,
           new SelectList(Model.VideoBitDepthList, "value", "value"), "",
           new { @class = "form-control", @style = "width:120px" })
        </div>


    </div>

    <div class="row">


        <div class="col-sm-2 text-right">

            <label class="control-label">Bit Rate Mode:</label>
        </div>

        <div class="col-sm-2 form-group">

            @Html.DropDownListFor(m => m.OverallSpecs_VM.BitRateMode,
           new SelectList(Model.BitRateModeList, "value", "value"), "",
           new { @class = "form-control", @style = "width:120px" })
        </div>

        <div class="col-sm-2 text-right">

            <label class="control-label">Audio Codec:</label>
        </div>

        <div class="col-sm-2 form-group">

            @Html.DropDownListFor(m => m.OverallSpecs_VM.AudioCodec,
           new SelectList(Model.AudioCodecList, "value", "value"), "",
           new { @class = "form-control", @style = "width:120px" })
        </div>

        <div class="col-sm-2 text-right">

            <label class="control-label">Audio Bit Rate:</label>
        </div>

        <div class="col-sm-2 form-group">

            @Html.TextBoxFor(m => m.OverallSpecs_VM.AudioBitRate,
           new { @class = "form-control", @style = "width:120px" })
        </div>


    </div>

    <div class="row">

        <div class="col-sm-2 text-right">

            <label class="control-label">Audio Bit Depth:</label>
        </div>

        <div class="col-sm-2 form-group">

            @Html.DropDownListFor(m => m.OverallSpecs_VM.AudioBitDepth,

           new SelectList(Model.AudioBitDepthList, "value", "value"), "",
           new { @class = "form-control", @style = "width:120px" })
        </div>

        <div class="col-sm-2 text-right">

            <label class="control-label">Sample Rate:</label>
        </div>

        <div class="col-sm-2 form-group">

            @Html.TextBoxFor(m => m.OverallSpecs_VM.SampleRate,
           new { @class = "form-control", @style = "width:120px" })
        </div>

        <div class="col-sm-2 text-right">

            <label class="control-label">GOP Structure:</label>
        </div>

        <div class="col-sm-2 form-group">

            @Html.DropDownListFor(m => m.OverallSpecs_VM.GOPStructure,
           new SelectList(Model.GOPStructureList, "value", "value"), "",
           new { @class = "form-control", @style = "width:120px" })
        </div>



    </div>

    <div class="row">

        <div class="col-sm-2 text-right">

            <label class="control-label">Gamut:</label>
        </div>

        <div class="col-sm-2 form-group">

            @Html.DropDownListFor(m => m.OverallSpecs_VM.Gamut,
           new SelectList(Model.GamutList, "value", "value"), "",
           new { @class = "form-control", @style = "width:120px" })
        </div>

        <div class="col-sm-2 text-right">

            <label class="control-label">Colour Encoding:</label>
        </div>

        <div class="col-sm-2 form-group">

            @Html.DropDownListFor(m => m.OverallSpecs_VM.ColourEncoding,
           new SelectList(Model.ColourEncodingList, "value", "value"), "",
           new { @class = "form-control", @style = "width:120px" })
        </div>

        <div class="col-sm-2 text-right">

            <label class="control-label">File Size:</label>
        </div>

        <div class="col-sm-2 form-group">

            @Html.TextBoxFor(m => m.OverallSpecs_VM.Filesize,
           new { @class = "form-control", @style = "width:120px" })
        </div>
    </div>

    <div class="row">
        @if (Model.OverallSpecs_VM.AssetType.ToLower() == "file")
        {
            <div class="col-sm-2 text-right">
                <label class="control-label">Frame Size:</label>
            </div>

            <div class="col-sm-2 form-group">

                @Html.TextBoxFor(m => m.OverallSpecs_VM.FrameSize,
               new { @class = "form-control", @style = "width:120px" })
            </div>

            <div class="col-sm-2 text-right">

                <label class="control-label">Colour Range:</label>
            </div>

            <div class="col-sm-2 form-group">

                @Html.DropDownListFor(m => m.OverallSpecs_VM.ColourSpace,
               new SelectList(Model.ColourRangeList), "",
               new
                    {
                        @class = "form-control",
                   @style = "width:120px"
               })
            </div>

        }
        else
        {
            <div class="col-sm-6">

            </div>
        }

    </div>
    <br />

    <div class="row">

        <div class="col-sm-2 text-right form-group">
            <b style="font-size:14px;">HDR Metadata</b>&nbsp;<input type="checkbox"/>

        </div>

    </div>

    <div class="row">

        <div class="col-sm-2 text-right">
          

        </div>

    </div>




</div>
 }



            @*<div class="row">
                <div class="col-sm-1 col-sm-offset-4 text-right">

                    <label class="control-label">Active Picture:</label>
                </div>

                <div class="col-sm-1 form-group">


                </div>

                @if (Model.OverallSpecs_VM.AssetType.ToLower() == "file")
                {
                    <div class="col-sm-1 text-right">

                        <label class="control-label">Frame Size:</label>
                    </div>

                    <div class="col-sm-1 form-group">

                        @Html.TextBoxFor(m => m.OverallSpecs_VM.FrameSize, new { @class = "form-control", maxlength = "40" })
                    </div>

                    <div class="col-sm-4">

                    </div>
                }
                else
                {
                    <div class="col-sm-6">

                    </div>

                }
            </div>*@


            <div class="row" style="display:none">

                <div class="col-sm-5">

                </div>
                <div class="col-sm-2 form-group">
                    <label class="radio-inline">@Html.RadioButtonFor(m => m.OverallSpecs_VM.IreMv, "I")ire</label>
                    <label class="radio-inline">@Html.RadioButtonFor(m => m.OverallSpecs_VM.IreMv, "M")mv</label>
                </div>

                <div class="col-sm-5">

                </div>
            </div>
        }



        <div class="row">
            <div class="col-sm-8">

            </div>
        </div>


        <div class="bs-callout bs-callout-default" style="display:none;">

            <fieldset>
                <legend style="font-weight:bold;font-size:13px;color:red;">Timecode Offset Calculator</legend>

                <div class="row">
                    <div class="col-sm-2">
                        <label class="control-label">Select FPS: </label>
                        <select class="form-group timecodeBox" id="FrameRates" name="FrameRates" required>
                            <option value=""></option>
                            <option value="23.976">23.976</option>
                            <option value="24">24</option>
                            <option value="25">25</option>
                        </select>
                    </div>

                    <div class="col-sm-2">
                        <label class="control-label">Present Prog. Start: </label>
                        <input class="form-group timecodeBox" id="PresentTCStart" name="PresentTCStart" maxlength="11" placeholder="hh:mm:ss:ff" type="text" value="" required />
                    </div>

                    <div class="col-sm-2">
                        <label class="control-label">New Prog. Start: </label>
                        <input class="form-group timecodeBox" id="NewTCStart" name="NewTCStart" maxlength="11" placeholder="hh:mm:ss:ff" type="text" value="" required />
                    </div>

                    <div class="col-sm-2">
                        <label class="control-label">Timecode Offfset: </label>
                        <input class="form-group timecodeBox" id="TCOffset" name="TCOffset" maxlength="11" placeholder="hh:mm:ss:ff" type="text" />
                    </div>


                </div>

            </fieldset>


            <div class="row">
                <div class="col-sm-10">
                    <label class="control-label">&nbsp; </label>
                </div>
            </div>

            <div class="row">
                <div class="col-sm-10">
                    <label class="control-label">&nbsp; </label>
                    <button class="btn btn-sm btn-primary" id="btnCalculateTCOffset">Calculate Timecode Offset</button>
                    <button class="btn btn-sm btn-danger" id="btnApplyTCOffset">Apply Timecode Offset </button>
                </div>
            </div>

        </div>

    @*</div>*@







</div>

  <script>

 function setActiveButton() {
    $(".subMenuOnClick").removeClass("subMenuOnClick")
     $('#lnkQcOverallSpecs').addClass("subMenuOnClick");
}

      $(function () {

        $(function () {

            setActiveButton();
           // initializeMultiSelectChecboxList();

            // add ':' in timecode textbox
            //$('.timecodeBox').on('keyup', function (event) {

                

            //    var currentValue = $(this).val();

            //    if (currentValue.length == 2 ||
            //        currentValue.length == 5 ||
            //        currentValue.length == 8) {

            //        $(this).val(currentValue + ':');
            //    }

            //});


        $('#btnSave').on("click", function () {

            //$('.cssload-preloader').fadeIn();
            var myModel = $('#form_jobdetails').serializeObject();

            $.post('/Job/SaveOverallSpecsDetails', { model: myModel }).done(function (data) {

                if (data.success == true) {
                    Msg.success(data.msg, 2 * 1000);
                }
                else {
                    Msg.error(data.msg, 5 * 1000);
                }
            })
            .fail(function (xdata) {

                Msg.error('Error occured! <b>Status:</b> ' + xdata.status + ' <b>Error Message:</b> ' + xdata.statusText, 5 * 1000);
            })
            .always(function () {

                $('.cssload-preloader').hide();
            });
        });


        $('input[name="OverallSpecs_VM.IreMv"]').on("change", function () {

            var selectedRB = $(this).val();
            var barVid = $('#@Html.IdFor(m => m.OverallSpecs_VM.VideoGain)');
            var barChroma = $('#@Html.IdFor(m => m.OverallSpecs_VM.ChromaGain)');
            var barSetup = $('#@Html.IdFor(m => m.OverallSpecs_VM.SetUp)');

            var lumPeak = $('#@Html.IdFor(m => m.OverallSpecs_VM.LuminancePeak)');
            var lumAvg = $('#@Html.IdFor(m => m.OverallSpecs_VM.LuminanceAvg)');
            var chrPeak = $('#@Html.IdFor(m => m.OverallSpecs_VM.ChromaPeak)');
            var chrAvg = $('#@Html.IdFor(m => m.OverallSpecs_VM.ChromaAvg)');
            var blackLvl = $('#@Html.IdFor(m => m.OverallSpecs_VM.BlackLevel)');

            if (selectedRB == 'I') {

                if($.isNumeric(barVid.val())){

                    var tmp = barVid.val() * (140 / 1000);
                    barVid.val(Math.round(tmp));
                }
                if ($.isNumeric(barChroma.val())) {

                    var tmp = barChroma.val() * (140 / 1000);
                    barChroma.val(Math.round(tmp));
                }
                if ($.isNumeric(barSetup.val())) {

                    var tmp = barSetup.val() * (140 / 1000);
                    barSetup.val(Math.round(tmp));
                }
                if ($.isNumeric(lumPeak.val())) {

                    var tmp = lumPeak.val() * (140 / 1000);
                    lumPeak.val(Math.round(tmp));
                }
                if ($.isNumeric(lumAvg.val())) {

                    var tmp = lumAvg.val() * (140 / 1000);
                    lumAvg.val(Math.round(tmp));
                }
                if ($.isNumeric(chrPeak.val())) {

                    var tmp = chrPeak.val() * (140 / 1000);
                    chrPeak.val(Math.round(tmp));
                }
                if ($.isNumeric(chrAvg.val())) {

                    var tmp = chrAvg.val() * (140 / 1000);
                    chrAvg.val(Math.round(tmp));
                }
                if ($.isNumeric(blackLvl.val())) {

                    var tmp = blackLvl.val() * (140 / 1000);
                    blackLvl.val(Math.round(tmp));
                }

            }
            else if (selectedRB == 'M') {

                if ($.isNumeric(barVid.val())) {

                    var tmp = (barVid.val() / 140) * 1000;
                    barVid.val(Math.round(tmp));
                }
                if ($.isNumeric(barChroma.val())) {

                    var tmp = (barChroma.val() / 140) * 1000;
                    barChroma.val(Math.round(tmp));
                }
                if ($.isNumeric(barSetup.val())) {

                    var tmp = (barSetup.val() / 140) * 1000;
                    barSetup.val(Math.round(tmp));
                }
                if ($.isNumeric(lumPeak.val())) {

                    var tmp = (lumPeak.val() / 140) * 1000;
                    lumPeak.val(Math.round(tmp));
                }
                if ($.isNumeric(lumAvg.val())) {

                    var tmp = (lumAvg.val() / 140) * 1000;
                    lumAvg.val(Math.round(tmp));
                }
                if ($.isNumeric(chrPeak.val())) {

                    var tmp = (chrPeak.val() / 140) * 1000;
                    chrPeak.val(Math.round(tmp));
                }
                if ($.isNumeric(chrAvg.val())) {

                    var tmp = (chrAvg.val() / 140) * 1000;
                    chrAvg.val(Math.round(tmp));
                }
                if ($.isNumeric(blackLvl.val())) {

                    var tmp = (blackLvl.val() / 140) * 1000;
                    blackLvl.val(Math.round(tmp));
                }

            }

        });

        $('#btnCalculateTCOffset').on("click", function () {


        /**** VALIDATE **********************/

            var validated = valiladateTCOffsetInput();

            if (!validated) {
                return;
            }


        /************************************************************/

            $.post('/Job/CalculateTCOffset', {
                qcnum: $("#Header_VM_Qcnum").val(),
                revnum: $("#Header_VM_subQcnum").val(),
                oldProgStartTC: $("#PresentTCStart").val(),
                newProgStartTC: $("#NewTCStart").val(),
                timecodeType: $("#FrameRates").val()
            }).done(function (data) {

                if (data.success == true) {
                    $("#TCOffset").val(data.timecodeOffsset)
                    //Msg.success(data.msg, 5 * 1000);
                }
                else {
                    Msg.error(data.msg, 5 * 1000);
                }
            })
                .fail(function (xdata) {

                    Msg.error('Error occured! <b>Status:</b> ' + xdata.status + ' <b>Error Message:</b> ' + xdata.statusText, 5 * 1000);
                })
                .always(function () {

                    $('.cssload-preloader').hide();
                });
        });

        $('#btnApplyTCOffset').on("click", function () {

         /********** VALIDATE **********************/
            var validated = valiladateTCOffsetInput();

            if (!validated) {
                return;
            }

         /**** Warn user about applying TC Offset **********************/
            ConfirmApplyTCOffset();

        });


    });


      });

    function ConfirmApplyTCOffset() {

            if (confirm('The timecode offset will be applied to the Layout, Text Info and Log. Do you want to continue?')) {
                applyTCOffset();
            } else {
                // Do nothing!

            }
        }

    function applyTCOffset() {
        $.post('/Job/ApplyTCOffset', {
            qcnum: $("#Header_VM_Qcnum").val(),
            revnum: $("#Header_VM_subQcnum").val(),
            oldProgStartTC: $("#PresentTCStart").val(),
            newProgStartTC: $("#NewTCStart").val(),
            timecodeType: $("#FrameRates").val()
        }).done(function (data) {

            if (data.success == true) {
                Msg.success(data.msg, 5 * 1000);
            }
            else {
                Msg.error(data.msg, 5 * 1000);
            }
        })
            .fail(function (xdata) {

                Msg.error('Error occured! <b>Status:</b> ' + xdata.status + ' <b>Error Message:</b> ' + xdata.statusText, 5 * 1000);
            })
            .always(function () {

                $('.cssload-preloader').hide();
            });
    }

    function valiladateTCOffsetInput() {

        $('#TCValidationMessage').html('');

        if ($("#FrameRates").val() == "") {
            $('#TCValidationMessage').html('Please select Frame Type and continue...');
            return false;
        }

        if ($("#PresentTCStart").val() == "" || $("#PresentTCStart").val() == "hh:mm:ss:ff") {
            $('#TCValidationMessage').html('Please enter the present start timecode and continue...');
            return false;
        }

        if ($("#PresentTCStart").val().length != "11") {
            $('#TCValidationMessage').html('The lenght of the present start timecode must be 11...');
            return false;
        }

        if ($("#NewTCStart").val() == "" || $("#NewTCStart").val() == "hh:mm:ss:ff") {
            $('#TCValidationMessage').html('Please enter the new start timecode and continue...');
            return false;
        }

        if ($("#NewTCStart").val().length != "11") {
            $('#TCValidationMessage').html('The lenght of the new start timecode must be 11...');
            return false;
        }


        return true;
    }


    </script>
