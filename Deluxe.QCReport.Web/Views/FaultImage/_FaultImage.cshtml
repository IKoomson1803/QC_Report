@model Deluxe.QCReport.Web.Models.HomeVM
@using Deluxe.QCReport.Common.Utilities;

@{
    ViewBag.Title = "Image Upload";
    var list = Model.FaultDescriptionImages.ToList();
    var imageName = Model.FaultDescriptionImage.ImageName;


}



<div class="bs-callout bs-callout-warning">
    <div class="row">
        <div class="col-xs-3">
            <b style="font-size:14px;">@string.Format("{0} - {1}: Image Upload", Model.FaultDescriptionImage.QCNum, Model.FaultDescriptionImage.SubQCNum)</b>
        </div>


        @*@if (Model.SecurityLevel >= 1)
            {

                <div class="col-xs-6 text-center">

                    <button class="btn btn-xs btn-primary CRUDButton" id="btnSave">Save</button>
                </div>

            }*@


    </div>

    @*<form id="frmFaultImage" name="frmFaultImage" enctype="multipart/form-data">*@


    @using (Html.BeginForm("", "", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal form-group-sm", @style = "margin-top: 20px;", @id = "frmFaultImage" }))
    {
        @Html.HiddenFor(m => m.FaultDescriptionImage.QCNum);
        @Html.HiddenFor(m => m.FaultDescriptionImage.SubQCNum);
        @Html.HiddenFor(m => m.FaultDescriptionImage.Id);
        @Html.HiddenFor(m => m.FaultDescriptionImage.ImageName);

        <div class="row">

            <div class="col-sm-1 text-right">

                <label class="control-label">Description:</label>
            </div>

            <div class="col-sm-7 form-group">
                @Html.TextAreaFor(m => m.FaultDescriptionImage.Description, 3, 3,
               new { 
                   @class = "form-control",
                   maxlength = "2000",
                   @placeholder="Please supply timecode and text to describe the uploaded image" })
            </div>
            <div class="col-sm-1 form-group">
                &nbsp;<span id="spDescription" class="glyphicon glyphicon-remove-circle" onclick="clearDescription()" style="color:red;cursor:pointer;font-size:16px" title="Clear Description"></span>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-1 text-right">
                <label class="control-label">&nbsp;</label>
            </div>

            <div class="col-sm-5 form-group">
                @*@Html.TextBox("ImageUploader", "", new { type = "file", @multiple = "multiple" })*@
                <div id="spImageName">@Model.FaultDescriptionImage.ImageName</div>

                <br />

                <div id="myDropzone" class="dropzone hzScroll">
                    <div id="previewFiles" style="margin-top:10px"></div>
                </div>
                <hr />
                <button class="btn btn-xs btn-primary CRUDButton" id="btnSave" onclick="UploadImages()" type="button">Save</button>
                <button class="btn btn-xs btn-danger CRUDButton" id="btnCancel" onclick="CancelUpload()" type="button">Cancel</button>
                <div id="divMessage" style="color:red; font-size:14px; font-weight:bold">@Model.Message</div>
            </div>


        </div>

    }

    @*</form>*@

</div>

@{
    Html.RenderPartial("_FaultsImagesGrid", Model);
}

<script type="text/javascript">

    window.addEventListener("dragover", function (e) {
        e = e || event;
        e.preventDefault();
    }, false);
    window.addEventListener("drop", function (e) {
        e = e || event;
        e.preventDefault();
    }, false);

    var actionUrl = '/FaultImage/SaveFaultImage';

    Dropzone.autoDiscover = false;
   // Dropzone.options.myDropzone =
    $('#myDropzone').dropzone({
        paramName: 'file', // The name that will be used to transfer the file
        maxFilesize: 2048, // MB
        maxFiles: 10,
        autoQueue: false,
        autoProcessQueue: false,
        addRemoveLinks: true,
        acceptedFiles: ".mp4,.jpg,.jpeg,.gif,.png",
        url: actionUrl,
        previewsContainer: "#previewFiles",
        dictDefaultMessage: 'Click or drag and drop image here . Maximum of 1 image allowed per upload',
         init: function () {
           
            this.on("addedfile", function (file) {
                clearFilename();
            });


            //this.on("maxfilesexceeded", function (file) {
            //    this.removeFile(file);
            //    showAlert("Files Limit exceeded! Maximum of 2 images allowed per upload. ", "error");
            //});

               
            //this.on("sending", function (file, xhr, formData) {
            
            //    $.blockUI({ message: 'Please wait...' });
            //    $('#btnSave').hide();

            //    formData.append('Id', $('#FaultDescriptionImage_Id').val());
            //    formData.append('QCNum', $('#FaultDescriptionImage_QCNum').val());
            //    formData.append('SubQCNum', $('#FaultDescriptionImage_SubQCNum').val());
            //    formData.append('Description', $('#FaultDescriptionImage_Description').val());
            //    formData.append('ImageName', $('#FaultDescriptionImage_ImageName').val());

            //});

            //this.on("canceled", function (file) {

            //});
        },
        success: function (file, response) {
           // console.log(response)
            $("#divContent").html(response);
            $(".subMenuOnClick").removeClass("subMenuOnClick")
            $("#btnFaultImage").addClass("subMenuOnClick");
            $('#btnSave').show();
            $.unblockUI();

        },
        error: function (file, response) {
            console.log(response)
            if (response != 'Upload canceled.') {
                file.previewElement.classList.add("dz-error");
                $('divMessage').html("<b>" + file.name + " Upload failed!</b><br/>")
            }
        }
    });



    function UploadImages() {
       
        // Checking whether FormData is available in browser
        if (window.FormData !== undefined) {

            if ($('#FaultDescriptionImage_Description').val() == '') {
                alert("Please supply a description and continue... ")
                return;
            }

            //var fileUpload =  $("#ImageUploader").get(0);
            var files = $('#myDropzone').get(0).dropzone.getAcceptedFiles();  //fileUpload.files;
            var imageName = $('#FaultDescriptionImage_ImageName').val();
 
            // Create FormData object
            var formData = new FormData();
         

            if (imageName == '') {


                var fileCount = files.length;

                 if (fileCount == 0) {
                    alert("Please upload file and continue... ")
                    return;
                }

              
                if (fileCount > 1) {

                    alert("You have uploaded " + fileCount + " images. Maximum of 1 image allowed per upload, please check and try again... ")
                    return;
                }

                // Looping over all files and add it to FormData object
                for (var i = 0; i < fileCount; i++) {
                    formData.append(files[i].name, files[i]);
                }
            }

            $.blockUI({ message: 'Please wait...' });

            // Adding one more key to FormData object
            formData.append('Id', $('#FaultDescriptionImage_Id').val());
            formData.append('QCNum', $('#FaultDescriptionImage_QCNum').val());
            formData.append('SubQCNum', $('#FaultDescriptionImage_SubQCNum').val());
            formData.append('Description', $('#FaultDescriptionImage_Description').val());
            formData.append('ImageName', imageName);
           // formData.append('ImageFile', files[0]);


            $.ajax({
                url: actionUrl,
                type: "POST",
                contentType: false, // Not to set any content header
                processData: false, // Not to process data
                data: formData,
                success: function (result) {
                    
                    $("#divContent").html(result); 
                    $(".subMenuOnClick").removeClass("subMenuOnClick")
                    $("#btnFaultImage").addClass("subMenuOnClick");
                    $.unblockUI();
                },
                error: function (err) {
                    alert(err.statusText);
                    $('divMessage').html("<b>" + err.statusText + ". Upload failed, please contact system admin.</b><br/>")
                    $.unblockUI();
                }
            });

        } else {
            alert("FormData is not supported.");
        }


    }

    function CancelUpload() {
        $('#FaultDescriptionImage_Description').val('')
        clearFilename();
        cleaDropzone();
    }

    function cleaDropzone() {

        var files = $('#myDropzone').get(0).dropzone.getAcceptedFiles();
        var fileCount = files.length;

        if (fileCount > 0) {
            Dropzone.forElement("#myDropzone").removeAllFiles(true);
        }
    }

    function clearDescription() {
        $('#FaultDescriptionImage_Description').val('');
    }

    function clearFilename() {
        $('#FaultDescriptionImage_ImageName').val('');
        $('#spImageName').html('');
        $('#btnSave').html('Save');
    }

    //$(document).ready(function () {
    //    $('#btnSave').click(function (event) {

    //       // alert('Hello');

    //       // return;

    //        event.preventDefault();
    //        event.stopImmediatePropagation();
    //        $('#frmFaultImage').submit();

    //        // Checking whether FormData is available in browser
    //        if (window.FormData !== undefined) {
    //            var actionUrl = '/FaultImage/SaveFaultImage';
    //            var fileUpload = $("#ImageUploader").get(0);
    //            var files = fileUpload.files;

    //            // Create FormData object
    //            var formData= new FormData();

    //            //// Looping over all files and add it to FormData object
    //            //for (var i = 0; i < files.length; i++) {
    //            //    fileData.append(files[i].name, files[i]);
    //            //}

    //            //var id = $('#FaultDescriptionImage_Id').val();
    //            //var qcNum = $('#FaultDescriptionImage_QCNum').val();
    //            //var subQCNum = $('#FaultDescriptionImage_SubQCNum').val();
    //            //var description = $('#FaultDescriptionImage_Description').val();
    //            //var imageName = $('#FaultDescriptionImage_ImageName').val();

    //            //console.log('id: ' + id)
    //            //console.log('qcNum: ' + qcNum)
    //            //console.log('subQCNum: ' + subQCNum)
    //            //console.log('description: ' + description)
    //            //return;

    //            // Adding one more key to FormData object
    //            fileData.append('Id', $('#FaultDescriptionImage_Id').val());
    //            fileData.append('QCNum', $('#FaultDescriptionImage_QCNum').val());
    //            fileData.append('SubQCNum', $('#FaultDescriptionImage_SubQCNum').val());
    //            fileData.append('Description', $('#FaultDescriptionImage_Description').val());
    //            fileData.append('ImageName', $('#FaultDescriptionImage_ImageName').val());
    //            fileData.append('ImageFile', files[0]);

    //            alert('Form Data Loaded');
    //            return;

    //            //$.ajax({
    //            //    url: actionUrl,
    //            //    type: "POST",
    //            //    contentType: false, // Not to set any content header
    //            //    processData: false, // Not to process data
    //            //    data: fileData,
    //            //    success: function (result) {
    //            //       // alert(result)
    //            //        $("#divContent").html(result);  //JSON.parse(result)
    //            //        $(".subMenuOnClick").removeClass("subMenuOnClick")
    //            //        $("#btnFaultImage").addClass("subMenuOnClick");
    //            //    },
    //            //    error: function (err) {
    //            //        alert(err.statusText);
    //            //    }
    //            //});

    //        } else {
    //            alert("FormData is not supported.");
    //        }
    //    });
    //});

    //$("#frmFaultImage").submit(function (e) {

    //    e.preventDefault(); // avoid to execute the actual submit of the form.

    //    //alert('Hello');
    //    //return

    //    var form = $(this);
    //    var actionUrl = '/FaultImage/SaveFaultImage';

    //    $.ajax({
    //        type: "POST",
    //        url: actionUrl,
    //        data: form.serialize(), // serializes the form's elements.
    //        contentType: false, // Not to set any content header
    //        processData: false, // Not to process data
    //        success: function (data) {
    //            $("#divContent").html(data);
    //            $(".subMenuOnClick").removeClass("subMenuOnClick")
    //            $("#" + element).addClass("subMenuOnClick");
    //        }
    //    });

    //});


</script>

